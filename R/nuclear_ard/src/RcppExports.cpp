// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_lipschitz
List compute_lipschitz(const arma::mat& inputs, const arma::mat& outputs, double lambda, double L_bar, const arma::mat& Z, const double gamma);
RcppExport SEXP _nuclearARDF_compute_lipschitz(SEXP inputsSEXP, SEXP outputsSEXP, SEXP lambdaSEXP, SEXP L_barSEXP, SEXP ZSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type outputs(outputsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type L_bar(L_barSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_lipschitz(inputs, outputs, lambda, L_bar, Z, gamma));
    return rcpp_result_gen;
END_RCPP
}
// compute_iteration
List compute_iteration(const arma::mat& inputs, const arma::mat& outputs, const double& lambda, const double& L_bar, arma::mat Z, double alpha, arma::mat W, double etol);
RcppExport SEXP _nuclearARDF_compute_iteration(SEXP inputsSEXP, SEXP outputsSEXP, SEXP lambdaSEXP, SEXP L_barSEXP, SEXP ZSEXP, SEXP alphaSEXP, SEXP WSEXP, SEXP etolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type inputs(inputsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type outputs(outputsSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type L_bar(L_barSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type W(WSEXP);
    Rcpp::traits::input_parameter< double >::type etol(etolSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_iteration(inputs, outputs, lambda, L_bar, Z, alpha, W, etol));
    return rcpp_result_gen;
END_RCPP
}
// nuclear_norm
double nuclear_norm(const arma::mat& matrix);
RcppExport SEXP _nuclearARDF_nuclear_norm(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(nuclear_norm(matrix));
    return rcpp_result_gen;
END_RCPP
}
// symmetrize
arma::mat symmetrize(const arma::mat& matrix);
RcppExport SEXP _nuclearARDF_symmetrize(SEXP matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type matrix(matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetrize(matrix));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_nuclearARDF_compute_lipschitz", (DL_FUNC) &_nuclearARDF_compute_lipschitz, 6},
    {"_nuclearARDF_compute_iteration", (DL_FUNC) &_nuclearARDF_compute_iteration, 8},
    {"_nuclearARDF_nuclear_norm", (DL_FUNC) &_nuclearARDF_nuclear_norm, 1},
    {"_nuclearARDF_symmetrize", (DL_FUNC) &_nuclearARDF_symmetrize, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_nuclearARDF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
