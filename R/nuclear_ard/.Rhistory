l10 = leisure1[,10] #movies
l11 = leisure1[,11] #pop concerts
l12 = leisure1[,12] #religion
l13 = leisure1[,13] #pet animal
l14 = leisure1[,14] #dance clubs or raves
l15 = leisure1[,15] #nothing
f1 = friendship.1
f2 = friendship.2
f3 = friendship.3
#replace NA with 7
c1[is.na(c1)] = 7
c2[is.na(c2)] = 7
c3[is.na(c3)] = 7
f1[is.na(f1)] = 7
f2[is.na(f2)] = 7
f3[is.na(f3)] = 7
D1 = (f1==1) + (f1==2)
D1 = pmax(D1,t(D1))  #Note: this network is symmetric (two agents are linked if either one nominates the other)
D2 = (f2==1) + (f2==2)
D2 = pmax(D2,t(D2))
D3 = (f3==1) + (f3==2)
D3 = pmax(D3,t(D3))
D = ceiling((D1+D2+D3)/3) #Note: this network has all of the links
############################################
##3) Plot Network                         ##
############################################
G = graph.adjacency(D)
layout = layout_nicely(G)
#Note: can convert an adjacency matrix to a graph object using graph.adjacency()
#Note: can drawn graphs using plot.igraph
plot.igraph(graph.adjacency(D1), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D2), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
#Note: can play around with different layouts and get an appreciation for how much work the default layout does
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_in_circle)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_as_star)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_on_sphere)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_randomly)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Note: can also draw a pixel picture
palf <- colorRampPalette(c("white", "purple"))
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:10],10)$cluster #Note: this is spectral clustering
#group = kmeans(D%*%D,10)$cluster #Note: this is codegree clustering
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, layout = layout_nicely, vertex.color = group)
E = D[order(group),order(group)]
heatmap(E, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
############################################
##4) Can color using covariates           ##
############################################
#Gender
V(G)$color = sex.F
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Pot
V(G)$color = (c1 == 2) | (c2==2) | (c3==2)
V(G)$color = V(G)$color + ((c1 == 3) | (c2==3) | (c3==3))
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
G3 = graph.adjacency(D3)
V(G3)$color = (c3==2)
V(G3)$color = V(G3)$color + 2*(c3==3)
plot.igraph(G3, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Church
V(G)$color = (leisure1[,12]==2| leisure2[,12]==2 | leisure3[,12]==2)
V(G)$color = V(G)$color +  (leisure1[,12]==3| leisure2[,12]==3 | leisure3[,12]==3)
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Dance
V(G)$color = (leisure1[,14]==2| leisure2[,14]==2 | leisure3[,14]==2)
V(G)$color = V(G)$color +  (leisure1[,14]==3| leisure2[,14]==3 | leisure3[,14]==3)
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8,layout=layout)
############################################
##5) Calculate Network Statistics         ##
############################################
#network density
density = mean(D[upper.tri(D)])
rbind(density)
#degree distribution
degree = rowSums(D)
rbind(degree)
hist(degree)
plot(ecdf(degree))
#clustering coefficients
transitivity(graph.adjacency(D), type = "global") #Note: ratio of transitive triads to intransitive triads
transitivity(graph.adjacency(D), type = "local") #Note: agent transitivity
mean(transitivity(graph.adjacency(D), type = "local")[is.nan(transitivity(graph.adjacency(D), type = "local"))==FALSE]) #Note: average transitivity
tran = transitivity(graph.adjacency(D), type = "local")
tran[is.nan(tran) == TRUE] = 0
tranNumber = (tran > quantile(tran,.25)) + (tran > quantile(tran,.5)) + (tran > quantile(tran,.75))
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = tranNumber, layout=layout)
tran = transitivity(graph.adjacency(D3), type = "local")
tran[is.nan(tran) == TRUE] = 0
tranNumber = (tran > quantile(tran,.25)) + (tran > quantile(tran,.5)) + (tran > quantile(tran,.75))
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = tranNumber, layout = layout)
#eivenvector centrality
eigen_centrality(graph.adjacency(D))$vector
centralNumber = (eigen_centrality(graph.adjacency(D))$vector > quantile(eigen_centrality(graph.adjacency(D))$vector,.25)) +
(eigen_centrality(graph.adjacency(D))$vector > quantile(eigen_centrality(graph.adjacency(D))$vector,.5)) +
(eigen_centrality(graph.adjacency(D))$vector > quantile(eigen_centrality(graph.adjacency(D))$vector,.75))
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = centralNumber,layout=layout)
eigen_centrality(graph.adjacency(D3))$vector
centralNumber = (eigen_centrality(graph.adjacency(D3))$vector > quantile(eigen_centrality(graph.adjacency(D3))$vector,.25)) +
(eigen_centrality(graph.adjacency(D3))$vector > quantile(eigen_centrality(graph.adjacency(D3))$vector,.5)) +
(eigen_centrality(graph.adjacency(D3))$vector > quantile(eigen_centrality(graph.adjacency(D3))$vector,.75))
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = centralNumber,layout=layout)
#diameter and betweeness centrality
diameter(graph.adjacency(D))
diameter(graph.adjacency(D3))
rbind(betweenness(graph.adjacency(D)))
centralNumber = (betweenness(graph.adjacency(D)) > quantile(betweenness(graph.adjacency(D)),.25)) +
(betweenness(graph.adjacency(D)) > quantile(betweenness(graph.adjacency(D)),.5)) +
(betweenness(graph.adjacency(D)) > quantile(betweenness(graph.adjacency(D)),.75))
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = centralNumber,layout=layout)
betweenness(graph.adjacency(D3))
centralNumber = (betweenness(graph.adjacency(D3)) > quantile(betweenness(graph.adjacency(D3)),.25)) +
(betweenness(graph.adjacency(D3)) > quantile(betweenness(graph.adjacency(D3)),.5)) +
(betweenness(graph.adjacency(D3)) > quantile(betweenness(graph.adjacency(D3)),.75))
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, vertex.color = centralNumber,layout=layout)
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:10],10)$cluster #Note: this is spectral clustering
#group = kmeans(D%*%D,10)$cluster #Note: this is codegree clustering
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, layout = layout_nicely, vertex.color = group)
E = D[order(group),order(group)]
heatmap(E, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:5],5)$cluster #Note: this is spectral clustering
#group = kmeans(D%*%D,10)$cluster #Note: this is codegree clustering
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, layout = layout_nicely, vertex.color = group)
E = D[order(group),order(group)]
heatmap(E, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Gender
V(G)$color = sex.F
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
library("igraph")
############################################
##Glasgow Study                           ##
############################################
############################################
##1) Load Data                            ##
############################################
setwd("~/Desktop/glasgow")
load("Glasgow-demographic.RData")
load("Glasgow-friendship.RData")
load("Glasgow-geographic.RData")
load("Glasgow-lifestyle.RData")
load("Glasgow-selections.RData")
load("Glasgow-substances.RData")
load("Glasgow-various.RData")
############################################
##2) Name Variables                       ##
############################################
c1 = cannabis[,1] #1=none, 2=tried once, 3= occasional, 4=never
c2 = cannabis[,2]
c3 = cannabis[,3]
c1
l1 = leisure1[,1] #listen to music
l1
V(G)$color = (c1 == 2) | (c2==2) | (c3==2)
V(G)$color = V(G)$color + ((c1 == 3) | (c2==3) | (c3==3))
V(G)$color = V(G)$color + ((c1 == =4) | (c2==4) | (c3==4))
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
V(G)$color
load("Glasgow-demographic.RData")
load("Glasgow-friendship.RData")
load("Glasgow-geographic.RData")
load("Glasgow-lifestyle.RData")
load("Glasgow-selections.RData")
load("Glasgow-substances.RData")
load("Glasgow-various.RData")
############################################
##2) Name Variables                       ##
############################################
c1 = cannabis[,1] #1=none, 2=tried once, 3= occasional, 4=regular
c2 = cannabis[,2]
c3 = cannabis[,3]
#leisure acgtivities: 1=most days, 2= once a week, 3= once a month, 4=less often or never
l1 = leisure1[,1] #listen to music
l2 = leisure1[,2] #shopping
l3 = leisure1[,3] #reading
l4 = leisure1[,4] #watch sports
l5 = leisure1[,5] #play sports
l6 = leisure1[,6] #hang around in streets
l7 = leisure1[,7] #computer games
l8 = leisure1[,8] #hobby? like art or music
l9 = leisure1[,9] #scouts
l10 = leisure1[,10] #movies
l11 = leisure1[,11] #pop concerts
l12 = leisure1[,12] #religion
l13 = leisure1[,13] #pet animal
l14 = leisure1[,14] #dance clubs or raves
l15 = leisure1[,15] #nothing
f1 = friendship.1
f2 = friendship.2
f3 = friendship.3
#replace NA with 7
c1[is.na(c1)] = 7
c2[is.na(c2)] = 7
c3[is.na(c3)] = 7
f1[is.na(f1)] = 7
f2[is.na(f2)] = 7
f3[is.na(f3)] = 7
D1 = (f1==1) + (f1==2)
D1 = pmax(D1,t(D1))  #Note: this network is symmetric (two agents are linked if either one nominates the other)
D2 = (f2==1) + (f2==2)
D2 = pmax(D2,t(D2))
D3 = (f3==1) + (f3==2)
D3 = pmax(D3,t(D3))
D = ceiling((D1+D2+D3)/3) #Note: this network has all of the links
############################################
##3) Plot Network                         ##
############################################
G = graph.adjacency(D)
layout = layout_nicely(G)
#Note: can convert an adjacency matrix to a graph object using graph.adjacency()
#Note: can drawn graphs using plot.igraph
plot.igraph(graph.adjacency(D1), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D2), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
#Note: can play around with different layouts and get an appreciation for how much work the default layout does
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_in_circle)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_as_star)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_on_sphere)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_randomly)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Note: can also draw a pixel picture
palf <- colorRampPalette(c("white", "purple"))
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:5],5)$cluster #Note: this is spectral clustering
#group = kmeans(D%*%D,10)$cluster #Note: this is codegree clustering
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, layout = layout_nicely, vertex.color = group)
E = D[order(group),order(group)]
heatmap(E, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
############################################
##4) Can color using covariates           ##
############################################
#Gender
V(G)$color = sex.F
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Pot
V(G)$color = (c1 == 2) | (c2==2) | (c3==2)
V(G)$color = V(G)$color + ((c1 == 3) | (c2==3) | (c3==3))
V(G)$color = V(G)$color + ((c1 == =4) | (c2==4) | (c3==4))
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
V(G)$color = (c1 == 2) | (c2==2) | (c3==2)
V(G)$color = V(G)$color + ((c1 == 3) | (c2==3) | (c3==3))
V(G)$color = V(G)$color + ((c1 == 4) | (c2==4) | (c3==4))
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
color(0)
color
V(G)$color
c1
#Church
V(G)$color = (leisure1[,12]==1| leisure2[,12]==1 | leisure3[,12]==1)
V(G)$color = V(G)$color +  (leisure1[,12]==2| leisure2[,12]==2 | leisure3[,12]==2)
V(G)$color = V(G)$color +  (leisure1[,12]==3| leisure2[,12]==3 | leisure3[,12]==3)
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
col
col(1)
############################################
##Glasgow Study                           ##
############################################
############################################
##1) Load Data                            ##
############################################
setwd("~/Desktop/glasgow")
load("Glasgow-demographic.RData")
load("Glasgow-friendship.RData")
load("Glasgow-geographic.RData")
load("Glasgow-lifestyle.RData")
load("Glasgow-selections.RData")
load("Glasgow-substances.RData")
load("Glasgow-various.RData")
############################################
##2) Name Variables                       ##
############################################
c1 = cannabis[,1] #1=none, 2=tried once, 3= occasional, 4=regular
c2 = cannabis[,2]
c3 = cannabis[,3]
#leisure acgtivities: 1=most days, 2= once a week, 3= once a month, 4=less often or never
l1 = leisure1[,1] #listen to music
l2 = leisure1[,2] #shopping
l3 = leisure1[,3] #reading
l4 = leisure1[,4] #watch sports
l5 = leisure1[,5] #play sports
l6 = leisure1[,6] #hang around in streets
l7 = leisure1[,7] #computer games
l8 = leisure1[,8] #hobby? like art or music
l9 = leisure1[,9] #scouts
l10 = leisure1[,10] #movies
l11 = leisure1[,11] #pop concerts
l12 = leisure1[,12] #religion
l13 = leisure1[,13] #pet animal
l14 = leisure1[,14] #dance clubs or raves
l15 = leisure1[,15] #nothing
f1 = friendship.1
f2 = friendship.2
f3 = friendship.3
install.packages("igraph")
library("igraph")
############################################
##Glasgow Study                           ##
############################################
############################################
##1) Load Data                            ##
############################################
setwd("~/Desktop/glasgow")
#Note: data comes from  <https://www.stats.ox.ac.uk/~snijders/siena/Glasgow_data.htm>
load("Glasgow-demographic.RData")
load("Glasgow-friendship.RData")
load("Glasgow-geographic.RData")
load("Glasgow-lifestyle.RData")
load("Glasgow-selections.RData")
load("Glasgow-substances.RData")
load("Glasgow-various.RData")
############################################
##2) Name Variables                       ##
############################################
c1 = cannabis[,1] #1=none, 2=tried once, 3= occasional, 4=regular
c2 = cannabis[,2]
c3 = cannabis[,3]
#leisure acgtivities: 1=most days, 2= once a week, 3= once a month, 4=less often or never
l1 = leisure1[,1] #listen to music
l2 = leisure1[,2] #shopping
l3 = leisure1[,3] #reading
l4 = leisure1[,4] #watch sports
l5 = leisure1[,5] #play sports
l6 = leisure1[,6] #hang around in streets
l7 = leisure1[,7] #computer games
l8 = leisure1[,8] #hobby? like art or music
l9 = leisure1[,9] #scouts
l10 = leisure1[,10] #movies
l11 = leisure1[,11] #pop concerts
l12 = leisure1[,12] #religion
l13 = leisure1[,13] #pet animal
l14 = leisure1[,14] #dance clubs or raves
l15 = leisure1[,15] #nothing
f1 = friendship.1
f2 = friendship.2
f3 = friendship.3
#replace NA with 7
c1[is.na(c1)] = 7
c2[is.na(c2)] = 7
c3[is.na(c3)] = 7
f1[is.na(f1)] = 7
f2[is.na(f2)] = 7
f3[is.na(f3)] = 7
D1 = (f1==1) + (f1==2)
D1 = pmax(D1,t(D1))  #Note: this network is symmetric (two agents are linked if either one nominates the other)
D2 = (f2==1) + (f2==2)
D2 = pmax(D2,t(D2))
D3 = (f3==1) + (f3==2)
D3 = pmax(D3,t(D3))
D = ceiling((D1+D2+D3)/3) #Note: this network has all of the links
install.packages("igraph")
library("igraph")
############################################
##Glasgow Study                           ##
############################################
############################################
##1) Load Data                            ##
############################################
setwd("~/Desktop/glasgow")
load("Glasgow-demographic.RData")
load("Glasgow-friendship.RData")
load("Glasgow-geographic.RData")
load("Glasgow-lifestyle.RData")
load("Glasgow-selections.RData")
load("Glasgow-substances.RData")
load("Glasgow-various.RData")
############################################
##2) Name Variables                       ##
############################################
c1 = cannabis[,1] #1=none, 2=tried once, 3= occasional, 4=regular
c2 = cannabis[,2]
c3 = cannabis[,3]
#leisure acgtivities: 1=most days, 2= once a week, 3= once a month, 4=less often or never
l1 = leisure1[,1] #listen to music
l2 = leisure1[,2] #shopping
l3 = leisure1[,3] #reading
l4 = leisure1[,4] #watch sports
l5 = leisure1[,5] #play sports
l6 = leisure1[,6] #hang around in streets
l7 = leisure1[,7] #computer games
l8 = leisure1[,8] #hobby? like art or music
l9 = leisure1[,9] #scouts
l10 = leisure1[,10] #movies
l11 = leisure1[,11] #pop concerts
l12 = leisure1[,12] #religion
l13 = leisure1[,13] #pet animal
l14 = leisure1[,14] #dance clubs or raves
l15 = leisure1[,15] #nothing
f1 = friendship.1
f2 = friendship.2
f3 = friendship.3
#replace NA with 7
c1[is.na(c1)] = 7
c2[is.na(c2)] = 7
c3[is.na(c3)] = 7
f1[is.na(f1)] = 7
f2[is.na(f2)] = 7
f3[is.na(f3)] = 7
D1 = (f1==1) + (f1==2)
D1 = pmax(D1,t(D1))  #Note: this network is symmetric (two agents are linked if either one nominates the other)
D2 = (f2==1) + (f2==2)
D2 = pmax(D2,t(D2))
D3 = (f3==1) + (f3==2)
D3 = pmax(D3,t(D3))
D = ceiling((D1+D2+D3)/3) #Note: this network has all of the links
############################################
##3) Plot Network                         ##
############################################
G = graph.adjacency(D)
layout = layout_nicely(G)
plot.igraph(graph.adjacency(D1), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D2), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8,layout = layout)
#Note: can play around with different layouts and get an appreciation for how much work the default layout does
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_in_circle)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_as_star)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_on_sphere)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout_randomly)
plot.igraph(graph.adjacency(D3), edge.arrow.size = 0, vertex.size = 1,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
#Note: can also draw a pixel picture
palf <- colorRampPalette(c("white", "purple"))
heatmap(D, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:5],5)$cluster #Note: this is spectral clustering
svd(D)$d
hist(svd(D)$d)
plot(svd(D)$d)
#Note: and use kmean clustering to order the nodes (more on this in a few weeks)
group = kmeans((svd(D)$v)[,1:7],7)$cluster #Note: this is spectral clustering
#group = kmeans(D%*%D,10)$cluster #Note: this is codegree clustering
plot.igraph(graph.adjacency(D), edge.arrow.size = 0, vertex.size = 3,
vertex.label = NA, vertex.label.cex = .8, layout = layout_nicely, vertex.color = group)
E = D[order(group),order(group)]
heatmap(E, Rowv = NA, Colv = NA, col = palf(100),
scale="none", margins=c(10,10),labRow = FALSE, labCol = FALSE)
#Gender
V(G)$color = sex.F
plot.igraph(G, edge.arrow.size = 0, vertex.size = 2,
vertex.label = NA, vertex.label.cex = .8, layout = layout)
sex.F
V(G)
V(G)$color
cl
setwd("~/Desktop/glasgow")
setwd("~/Desktop/glasgow")
